svg_builder_pytorch.py
"""
PyTorch版本的SVG构建器
用于将布局数据转换为SVG可视化
"""

import xml.etree.ElementTree as ET
from typing import Dict, Optional
import numpy as np


class SVGBuilder:
    """SVG构建器"""
    
    def __init__(
        self,
        key: str = 'type',
        colormap: Optional[Dict] = None,
        canvas_width: int = 256,
        canvas_height: int = 256,
        max_width: Optional[int] = None,
        max_height: Optional[int] = None,
        opacity: float = 0.5,
        image_db = None,
        text_db = None,
        render_text: bool = False,
        **kwargs
    ):
        """
        Args:
            key: 用于着色的键 ('type' 或 'color')
            colormap: 颜色映射字典
            canvas_width: 画布宽度
            canvas_height: 画布高度
            max_width: 最大显示宽度
            max_height: 最大显示高度
            opacity: 不透明度
            image_db: 图像检索数据库
            text_db: 文本检索数据库
            render_text: 是否渲染文本
        """
        self.key = key
        self.canvas_width = canvas_width
        self.canvas_height = canvas_height
        self.max_width = max_width
        self.max_height = max_height
        self.opacity = opacity
        self.image_db = image_db
        self.text_db = text_db
        self.render_text = render_text
        
        # 颜色映射
        if colormap is None and key != 'color':
            self.colormap = self._make_default_colormap()
        else:
            self.colormap = colormap or {}
    
    def _make_default_colormap(self) -> Dict:
        """创建默认颜色映射"""
        # 常见元素类型的颜色
        return {
            'imageElement': 'rgb(66, 166, 246)',
            'textElement': 'rgb(241, 98, 147)',
            'svgElement': 'rgb(175, 214, 130)',
            'maskElement': 'rgb(79, 196, 248)',
            'coloredBackground': 'rgb(226, 191, 232)',
            'humanElement': 'rgb(255, 139, 101)',
            '': 'none',
        }
    
    def compute_canvas_size(self, document: Dict):
        """计算画布大小"""
        canvas_width = document.get('canvas_width', self.canvas_width)
        canvas_height = document.get('canvas_height', self.canvas_height)
        
        scale = 1.0
        if self.max_width is not None:
            scale = min(self.max_width / canvas_width, scale)
        if self.max_height is not None:
            scale = min(self.max_height / canvas_height, scale)
        
        return canvas_width * scale, canvas_height * scale
    
    def __call__(self, document: Dict) -> str:
        """
        将文档转换为SVG字符串
        
        Args:
            document: 文档字典
        
        Returns:
            SVG字符串
        """
        canvas_width, canvas_height = self.compute_canvas_size(document)
        
        # 创建SVG根元素
        root = ET.Element(
            'svg',
            {
                'width': str(int(canvas_width)),
                'height': str(int(canvas_height)),
                'viewBox': '0 0 1 1',
                'style': 'background-color: #FFF',
                'preserveAspectRatio': 'none',
                'xmlns': 'http://www.w3.org/2000/svg',
            }
        )
        
        # 添加元素
        for element in document.get('elements', []):
            self._add_element(root, element, document)
        
        # 转换为字符串
        return ET.tostring(root, encoding='unicode')
    
    def _add_element(self, parent, element: Dict, document: Dict):
        """添加单个元素到SVG"""
        # 获取颜色
        if self.key == 'color':
            color = element.get('color', [0, 0, 0])
            if isinstance(color, list):
                fill = f'rgb({int(color[0])},{int(color[1])},{int(color[2])})'
            else:
                fill = 'rgb(0,0,0)'
        else:
            element_type = element.get(self.key, '')
            # 处理可能是列表的情况
            if isinstance(element_type, list):
                element_type = element_type[0] if element_type else ''
            # 处理可能是数字的情况
            if isinstance(element_type, (int, float)):
                element_type = str(int(element_type))
            fill = self.colormap.get(element_type, 'rgb(128,128,128)')
        
        # 获取位置和尺寸
        left = float(element.get('left', 0))
        top = float(element.get('top', 0))
        width = float(element.get('width', 0.1))
        height = float(element.get('height', 0.1))
        opacity = float(element.get('opacity', 1.0))
        
        # 检查是否需要渲染图像或文本
        image_url = None
        if self.image_db and element.get('type') in ['imageElement', 'svgElement', 'maskElement']:
            if 'image_embedding' in element:
                image_url = self.image_db.search(element['image_embedding'])
        
        text_content = None
        if self.text_db and element.get('type') == 'textElement':
            if 'text_embedding' in element:
                text_content = self.text_db.search(element['text_embedding'])
        
        # 创建元素
        if image_url and image_url != '':
            # 图像元素
            elem = ET.SubElement(
                parent,
                'image',
                {
                    'x': str(left),
                    'y': str(top),
                    'width': str(width),
                    'height': str(height),
                    'href': image_url,
                    'opacity': str(opacity * self.opacity),
                    'preserveAspectRatio': 'none',
                }
            )
        elif self.render_text and text_content:
            # 文本元素
            container = ET.SubElement(
                parent,
                'svg',
                {
                    'x': str(left),
                    'y': str(top),
                    'width': str(width),
                    'height': str(height),
                    'overflow': 'visible',
                }
            )
            
            text_elem = ET.SubElement(
                container,
                'text',
                {
                    'x': '50%',
                    'y': '50%',
                    'text-anchor': 'middle',
                    'dominant-baseline': 'middle',
                    'fill': fill,
                    'font-size': str(height * 0.8),
                    'font-family': element.get('font_family', 'Arial'),
                }
            )
            text_elem.text = str(text_content)[:50]  # 限制长度
        else:
            # 矩形元素
            elem = ET.SubElement(
                parent,
                'rect',
                {
                    'x': str(left),
                    'y': str(top),
                    'width': str(width),
                    'height': str(height),
                    'fill': fill,
                    'opacity': str(opacity * self.opacity),
                }
            )
        
        # 添加标题（用于hover显示）
        title = ET.SubElement(elem if not (self.render_text and text_content) else container, 'title')
        title.text = str({k: v for k, v in element.items() if not isinstance(v, (list, np.ndarray))})


# 测试代码
if __name__ == "__main__":
    # 创建测试文档
    test_doc = {
        'id': 'test_001',
        'canvas_width': 800,
        'canvas_height': 600,
        'length': 3,
        'elements': [
            {
                'type': 'imageElement',
                'left': 0.1,
                'top': 0.1,
                'width': 0.3,
                'height': 0.3,
                'color': [255, 0, 0],
                'opacity': 1.0,
            },
            {
                'type': 'textElement',
                'left': 0.5,
                'top': 0.5,
                'width': 0.3,
                'height': 0.1,
                'color': [0, 0, 255],
                'opacity': 1.0,
                'font_family': 'Arial',
            },
            {
                'type': 'coloredBackground',
                'left': 0.0,
                'top': 0.0,
                'width': 1.0,
                'height': 1.0,
                'color': [240, 240, 240],
                'opacity': 0.5,
            },
        ]
    }
    
    # 测试布局构建器
    builder = SVGBuilder(key='type', max_width=400)
    svg = builder(test_doc)
    print("SVG生成成功!")
    print(f"SVG长度: {len(svg)} 字符")
    
    # 保存到文件
    with open('test_layout.svg', 'w') as f:
        f.write(svg)
    print("✓ 已保存到 test_layout.svg")

    'elements' =
[{'left': 5, 'top': 0, 'width': 63, 'height': 63, 'type': 3, 'opacity': 1.0, 'color': [...], 'font_family': 13, 'image_embedding': [...], 'text_embedding': [...]}, {'left': 0, 'top': 19, 'width': 17, 'height': 24, 'type': 1, 'opacity': 1.0, 'color': [...], 'font_family': 13, 'image_embedding': [...], 'text_embedding': [...]}, {'left': 11, 'top': 13, 'width': 16, 'height': 36, 'type': 5, 'opacity': 1.0, 'color': [...], 'font_family': 13, 'image_embedding': [...], 'text_embedding': [...]}, {'left': 22, 'top': 52, 'width': 6, 'height': 5, 'type': 1, 'opacity': 1.0, 'color': [...], 'font_family': 13, 'image_embedding': [...], 'text_embedding': [...]}, {'left': 0, 'top': 0, 'width': 35, 'height': 63, 'type': 1, 'opacity': 1.0, 'color': [...], 'font_family': 13, 'image_embedding': [...], 'text_embedding': [...]}, {'left': 27, 'top': 7, 'width': 12, 'height': 18, 'type': 2, 'opacity': 1.0, 'color': [...], 'font_family': 35, 'image_embedding': [...], 'text_embedding': [...]}, {'left': 11, 'top': 12, 'width': 13, 'hei...
special variables
function variables
00 =
{'left': 5, 'top': 0, 'width': 63, 'height': 63, 'type': 3, 'opacity': 1.0, 'color': [0, 0, 0], 'font_family': 13, 'image_embedding': [-0.15892302989959717, 0.45916473865509033, -0.5830442309379578, 0.10515283048152924, 0.00042475713416934013, 0.032017771154642105, 0.04864596202969551, 0.399717777967453, 0.9557327628135681, 0.3862721025943756, 0.10206281393766403, 0.045355357229709625, -0.008445531129837036, -0.3009283244609833, 0.3069932460784912, 0.2081594318151474, 1.254794716835022, 0.024405241012573242, 0.18945594131946564, ...], 'text_embedding': [0.03842202574014664, 0.08975290507078171, -0.23243100941181183, -0.03189079463481903, 0.2858487665653229, -0.11273667216300964, 0.08067253232002258, -1.4695996046066284, -0.020934022963047028, -0.03099096193909645, 0.16405129432678223, 0.0032381080090999603, -0.3202991485595703, 0.021658357232809067, 0.10700083523988724, -0.01790677011013031, 0.22266849875450134, 0.13364440202713013, 0.04111628234386444, ...]}
01 =
{'left': 0, 'top': 19, 'width': 17, 'height': 24, 'type': 1, 'opacity': 1.0, 'color': [0, 0, 0], 'font_family': 13, 'image_embedding': [0.19737836718559265, -0.1905936449766159, -0.27299371361732483, -0.06585028022527695, 0.056848395615816116, -0.2840520739555359, -0.3953392803668976, 1.2850806713104248, 0.2503903806209564, -0.1721278429031372, 0.21823137998580933, -0.0746455192565918, -0.3254997730255127, 0.06676750630140305, -0.1542917639017105, 0.007535438984632492, -0.1227702796459198, 0.05052933841943741, 0.0820961594581604, ...], 'text_embedding': [0.03842202574014664, 0.08975290507078171, -0.23243100941181183, -0.03189079463481903, 0.2858487665653229, -0.11273667216300964, 0.08067253232002258, -1.4695996046066284, -0.020934022963047028, -0.03099096193909645, 0.16405129432678223, 0.0032381080090999603, -0.3202991485595703, 0.021658357232809067, 0.10700083523988724, -0.01790677011013031, 0.22266849875450134, 0.13364440202713013, 0.04111628234386444, ...]}
02 =
{'left': 11, 'top': 13, 'width': 16, 'height': 36, 'type': 5, 'opacity': 1.0, 'color': [0, 0, 0], 'font_family': 13, 'image_embedding': [-0.04768259823322296, 0.28581032156944275, -0.15932784974575043, -0.12782755494117737, 0.06147021800279617, -0.06552164256572723, 0.04176819697022438, 0.8291298151016235, 0.32598304748535156, 0.13781751692295074, 0.07303337752819061, -0.05434269458055496, 0.08919844031333923, -0.3237176537513733, -0.10284127295017242, 0.32297781109809875, 0.7754181623458862, 0.17707304656505585, 0.2003045529127121, ...], 'text_embedding': [0.03842202574014664, 0.08975290507078171, -0.23243100941181183, -0.03189079463481903, 0.2858487665653229, -0.11273667216300964, 0.08067253232002258, -1.4695996046066284, -0.020934022963047028, -0.03099096193909645, 0.16405129432678223, 0.0032381080090999603, -0.3202991485595703, 0.021658357232809067, 0.10700083523988724, -0.01790677011013031, 0.22266849875450134, 0.13364440202713013, 0.04111628234386444, ...]}
03 =
{'left': 22, 'top': 52, 'width': 6, 'height': 5, 'type': 1, 'opacity': 1.0, 'color': [0, 0, 0], 'font_family': 13, 'image_embedding': [-0.06946372240781784, -0.26868683099746704, -0.17371392250061035, 0.0913173034787178, 0.433529257774353, -0.41453781723976135, -0.2847863733768463, 1.1522716283798218, 0.3262879252433777, 0.026587344706058502, 0.09181422740221024, 0.09137028455734253, 0.47584834694862366, -0.3723961412906647, -0.09296663850545883, 0.1258104145526886, 0.6884299516677856, 0.3130294680595398, -0.007929030805826187, ...], 'text_embedding': [0.03842202574014664, 0.08975290507078171, -0.23243100941181183, -0.03189079463481903, 0.2858487665653229, -0.11273667216300964, 0.08067253232002258, -1.4695996046066284, -0.020934022963047028, -0.03099096193909645, 0.16405129432678223, 0.0032381080090999603, -0.3202991485595703, 0.021658357232809067, 0.10700083523988724, -0.01790677011013031, 0.22266849875450134, 0.13364440202713013, 0.04111628234386444, ...]}
04 =
{'left': 0, 'top': 0, 'width': 35, 'height': 63, 'type': 1, 'opacity': 1.0, 'color': [0, 0, 0], 'font_family': 13, 'image_embedding': [0.18874642252922058, -0.07683493942022324, -0.3984981179237366, 0.10618241131305695, 0.42037785053253174, -0.1470436155796051, -0.1484978049993515, 1.2851943969726562, 0.5123825073242188, 0.06626315414905548, 0.5413968563079834, 0.023217596113681793, 0.2279655486345291, -0.22978118062019348, -0.014627434313297272, 0.08166355639696121, 0.42915862798690796, -0.16438457369804382, -0.08828717470169067, ...], 'text_embedding': [0.03842202574014664, 0.08975290507078171, -0.23243100941181183, -0.03189079463481903, 0.2858487665653229, -0.11273667216300964, 0.08067253232002258, -1.4695996046066284, -0.020934022963047028, -0.03099096193909645, 0.16405129432678223, 0.0032381080090999603, -0.3202991485595703, 0.021658357232809067, 0.10700083523988724, -0.01790677011013031, 0.22266849875450134, 0.13364440202713013, 0.04111628234386444, ...]}
05 =
{'left': 27, 'top': 7, 'width': 12, 'height': 18, 'type': 2, 'opacity': 1.0, 'color': [0, 0, 1], 'font_family': 35, 'image_embedding': [-0.15034951269626617, -0.26338812708854675, -0.565510630607605, -0.07222572714090347, 0.15578675270080566, -0.04308461397886276, -0.3871196508407593, 1.2720801830291748, 0.2835937738418579, 0.27378469705581665, 0.5060464143753052, -0.1557123064994812, 0.3533463478088379, 0.014748122543096542, -0.1428394317626953, 0.11168117821216583, 0.10962966829538345, 0.1525709331035614, 0.03198075667023659, ...], 'text_embedding': [0.3500804305076599, 0.5498948097229004, 0.017040345817804337, 0.20143599808216095, 0.0635933056473732, 0.39218345284461975, -0.20745578408241272, -0.4836209714412689, 0.0541568249464035, 0.38970187306404114, 0.32511278986930847, -0.17575891315937042, 0.02486320585012436, -0.3157520890235901, 0.26778537034988403, 0.1561504453420639, 0.6018474102020264, 0.10537089407444, -0.3084956109523773, ...]}
06 =
{'left': 11, 'top': 12, 'width': 13, 'height': 37, 'type': 1, 'opacity': 1.0, 'color': [0, 0, 0], 'font_family': 13, 'image_embedding': [0.21682460606098175, -0.09605678915977478, -0.4711957573890686, 0.1069682240486145, 0.27337631583213806, -0.2683669328689575, -0.17495514452457428, 1.2440972328186035, 0.6165025234222412, -0.02003875933587551, 0.36042335629463196, -0.0011337902396917343, -0.01216832548379898, -0.4357844293117523, -0.22055743634700775, 0.007788101211190224, 0.35885414481163025, 0.1873905062675476, -0.04010658338665962, ...], 'text_embedding': [0.03842202574014664, 0.08975290507078171, -0.23243100941181183, -0.03189079463481903, 0.2858487665653229, -0.11273667216300964, 0.08067253232002258, -1.4695996046066284, -0.020934022963047028, -0.03099096193909645, 0.16405129432678223, 0.0032381080090999603, -0.3202991485595703, 0.021658357232809067, 0.10700083523988724, -0.01790677011013031, 0.22266849875450134, 0.13364440202713013, 0.04111628234386444, ...]}
07 =
{'left': 27, 'top': 17, 'width': 13, 'height': 18, 'type': 2, 'opacity': 1.0, 'color': [231, 53, 60], 'font_family': 35, 'image_embedding': [-0.15034951269626617, -0.26338812708854675, -0.565510630607605, -0.07222572714090347, 0.15578675270080566, -0.04308461397886276, -0.3871196508407593, 1.2720801830291748, 0.2835937738418579, 0.27378469705581665, 0.5060464143753052, -0.1557123064994812, 0.3533463478088379, 0.014748122543096542, -0.1428394317626953, 0.11168117821216583, 0.10962966829538345, 0.1525709331035614, 0.03198075667023659, ...], 'text_embedding': [0.07764995843172073, 0.5087507963180542, 0.15256044268608093, 0.18876153230667114, -0.14209450781345367, 0.04063216596841812, -0.294760525226593, -0.5962039828300476, -0.13821277022361755, 0.038349565118551254, -0.2794772684574127, -0.2414514124393463, -0.11089727282524109, -0.32266226410865784, 0.09048563241958618, 0.025997593998908997, 0.3420066833496094, 0.037002719938755035, 0.2624906003475189, ...]}
08 =
{'left': 23, 'top': 50, 'width': 8, 'height': 5, 'type': 1, 'opacity': 1.0, 'color': [0, 0, 0], 'font_family': 13, 'image_embedding': [0.16651420295238495, -0.09110088646411896, -0.13673582673072815, 0.008287699893116951, 0.22585804760456085, -0.2882402539253235, -0.17031356692314148, 1.0834996700286865, 0.24879905581474304, -0.17059966921806335, 0.07221221178770065, 0.050488460808992386, -0.10280107706785202, -0.3454488515853882, 0.2995024025440216, 0.12556543946266174, 0.8310918807983398, 0.2648704946041107, -0.12701928615570068, ...], 'text_embedding': [0.03842202574014664, 0.08975290507078171, -0.23243100941181183, -0.03189079463481903, 0.2858487665653229, -0.11273667216300964, 0.08067253232002258, -1.4695996046066284, -0.020934022963047028, -0.03099096193909645, 0.16405129432678223, 0.0032381080090999603, -0.3202991485595703, 0.021658357232809067, 0.10700083523988724, -0.01790677011013031, 0.22266849875450134, 0.13364440202713013, 0.04111628234386444, ...]}
09 =
{'left': 24, 'top': 51, 'width': 9, 'height': 3, 'type': 2, 'opacity': 1.0, 'color': [255, 255, 255], 'font_family': 35, 'image_embedding': [-0.15034951269626617, -0.26338812708854675, -0.565510630607605, -0.07222572714090347, 0.15578675270080566, -0.04308461397886276, -0.3871196508407593, 1.2720801830291748, 0.2835937738418579, 0.27378469705581665, 0.5060464143753052, -0.1557123064994812, 0.3533463478088379, 0.014748122543096542, -0.1428394317626953, 0.11168117821216583, 0.10962966829538345, 0.1525709331035614, 0.03198075667023659, ...], 'text_embedding': [-0.06236262619495392, 0.014855588786303997, -0.06765373051166534, 0.23709484934806824, -0.261696994304657, -0.011020712554454803, -0.08791996538639069, -0.40544241666793823, -0.6625832319259644, 0.2583272457122803, 0.028094861656427383, 0.001068565994501114, -0.22742672264575958, 0.2622835338115692, 0.18387345969676971, 0.5216937065124512, 0.6254377961158752, 0.10920776426792145, -0.3761136531829834, ...]}
10 =
{'left': 0, 'top': 0, 'width': 0, 'height': 0, 'type': 0, 'opacity': 0.0, 'color': [0, 0, 0], 'font_family': 0, 'image_embedding': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...], 'text_embedding': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...]}
len() =
11
len() =
5

在调用svg_builder_pytorch之前需要对type进行处理

            'svgElement': 0
            'textElement': 1
            'imageElement': 2
            'coloredBackground': 3
            'maskElement':4 

